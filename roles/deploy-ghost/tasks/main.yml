---
# Deployment for deploying ghost
- name: ghost deploy
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ghost
        namespace: "{{ namespace }}"
        labels:
          app: ghost
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ghost
        template:
          metadata:
            labels:
              app: ghost
          spec:
            containers:
            - name: ghost
              image: "{{ ghost_image }}"
              resources:
                requests:
                  cpu: "250m"
              env:
              - name: database__client
                value: "{{ database_client }}"  
                # value: mysql  
              - name: database__connection__host
                value: mysql-service
              - name: database__connection__database
                value: ghost_db
              - name: database__connection__user
                value: ghost_user
              - name: database__connection__password
                value: "123456" # Use secret object in real usage
              - name: url
                value: http://{{ ghost_ip }}:{{ ghost_port }}
              - name: MIGRATE
                value: "true"
              - name: NODE_ENV
                value: "{{ ghost_mode }}"
              ports:
              - containerPort: 2368
            
            #   volumeMounts:
            #   - name: sqlite3-persistent-storage
            #     mountPath: /var/lib/ghost/versions/5.14.1/content/data/
            # volumes:
            # - name: sqlite3-persistent-storage
            #   persistentVolumeClaim:
            #         claimName: sqlite3-pv-claim


# Create Service for exposing ghost
- name: Create ghost Service
  k8s:
    state: present
    definition:      
      apiVersion: v1
      kind: Service
      metadata:
        name: ghost-service
        namespace: "{{ namespace }}"        
        labels:
          app: ghost
          tier: app
      spec:
        type: NodePort # Makes the service accessible on a static port on each Node in the cluster.
        selector:
          app: ghost
        ports:
            # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
          - targetPort: 2368 # port that containers are listening on
            port: 2368 # port exposed internally in the cluster
            # Optional field
            # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
            nodePort: 30007 # a static port assigned on each the node

- name: Get ghost POD name
  shell: sed -i '/ghost_pod_name/d' inventory/gcp.yml && kubectl get pods -n {{ namespaceÂ }} | grep "ghost-" | awk '{print "  " "ghost_pod_name" ":" " " $1}' >> inventory/gcp.yml
  #shell: kubectl cp mysql/ghost-64dd74d5f7-cdgxd:/var/lib/ghost/content/data/ghost.db ./ghost.db
  #shell: echo "UPDATE users SET name = 'ascn', password='ascn123', slug='ascn', email='ascn@example.com' WHERE id=1;" > fich.sql
  #shell: sqlite3 ghost.db < fich.sql
  #shell: kubectl cp ./ghost.db mysql/ghost-64dd74d5f7-cdgxd:/var/lib/ghost/content/data/ghost.db

# cloud container clusters get-credentials ascn-cluster --zone us-central1-a --project ascnghostgrupotp42 \
# && kubectl port-forward --namespace mysql $(kubectl get pod --namespace mysql --selector="app=ghost" --output jsonpath='{.items[0].metadata.name}') 8080:2368\

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: ghost
  name: ghost-hpa
  namespace: "{{ namespace }}"
spec:
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ghost
